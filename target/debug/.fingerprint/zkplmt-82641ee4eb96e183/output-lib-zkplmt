{"message":"unused import: `rand_core::RngCore`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/kyc_proof.rs","byte_start":24,"byte_end":42,"line_start":2,"line_end":2,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use rand_core::RngCore;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/kyc_proof.rs","byte_start":20,"byte_end":43,"line_start":2,"line_end":2,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use rand_core::RngCore;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rand_core::RngCore`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/kyc_proof.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse rand_core::RngCore;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `sha2::Sha256`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/kyc_proof.rs","byte_start":127,"byte_end":139,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"use sha2::Sha256;","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/kyc_proof.rs","byte_start":123,"byte_end":140,"line_start":6,"line_end":6,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"use sha2::Sha256;","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sha2::Sha256`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/kyc_proof.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sha2::Sha256;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `curve25519_dalek::edwards::CompressedEdwardsY`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/kyc_proof.rs","byte_start":163,"byte_end":208,"line_start":8,"line_end":8,"column_start":5,"column_end":50,"is_primary":true,"text":[{"text":"use curve25519_dalek::edwards::CompressedEdwardsY;","highlight_start":5,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/kyc_proof.rs","byte_start":159,"byte_end":209,"line_start":8,"line_end":8,"column_start":1,"column_end":51,"is_primary":true,"text":[{"text":"use curve25519_dalek::edwards::CompressedEdwardsY;","highlight_start":1,"highlight_end":51}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `curve25519_dalek::edwards::CompressedEdwardsY`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/kyc_proof.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse curve25519_dalek::edwards::CompressedEdwardsY;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `curve25519_dalek::traits::IsIdentity`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/kyc_proof.rs","byte_start":297,"byte_end":333,"line_start":11,"line_end":11,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"use curve25519_dalek::traits::IsIdentity;","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/kyc_proof.rs","byte_start":293,"byte_end":334,"line_start":11,"line_end":11,"column_start":1,"column_end":42,"is_primary":true,"text":[{"text":"use curve25519_dalek::traits::IsIdentity;","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `curve25519_dalek::traits::IsIdentity`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/kyc_proof.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse curve25519_dalek::traits::IsIdentity;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `sha2::Sha512`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/kyc_proof.rs","byte_start":339,"byte_end":351,"line_start":12,"line_end":12,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"use sha2::Sha512;","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/kyc_proof.rs","byte_start":335,"byte_end":352,"line_start":12,"line_end":12,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"use sha2::Sha512;","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sha2::Sha512`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/kyc_proof.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sha2::Sha512;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `super::value_bound_signature::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/range_proof.rs","byte_start":78,"byte_end":109,"line_start":8,"line_end":8,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"use super::value_bound_signature::*;","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/range_proof.rs","byte_start":74,"byte_end":110,"line_start":8,"line_end":8,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"use super::value_bound_signature::*;","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `super::value_bound_signature::*`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/range_proof.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse super::value_bound_signature::*;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `sha2::Sha256`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":229,"byte_end":241,"line_start":10,"line_end":10,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"use sha2::Sha256;","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":225,"byte_end":242,"line_start":10,"line_end":10,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"use sha2::Sha256;","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sha2::Sha256`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sha2::Sha256;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `rand_core::RngCore`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":265,"byte_end":283,"line_start":12,"line_end":12,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use rand_core::RngCore;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":261,"byte_end":284,"line_start":12,"line_end":12,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use rand_core::RngCore;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rand_core::RngCore`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse rand_core::RngCore;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `bincode`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":325,"byte_end":332,"line_start":15,"line_end":15,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"use bincode;","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":321,"byte_end":333,"line_start":15,"line_end":15,"column_start":1,"column_end":13,"is_primary":true,"text":[{"text":"use bincode;","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `bincode`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse bincode;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"message":"type `AP_Declaration_Of_Public_key` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1138,"byte_end":1166,"line_start":54,"line_end":54,"column_start":12,"column_end":40,"is_primary":true,"text":[{"text":"pub struct AP_Declaration_Of_Public_key {","highlight_start":12,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_camel_case_types)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1138,"byte_end":1166,"line_start":54,"line_end":54,"column_start":12,"column_end":40,"is_primary":true,"text":[{"text":"pub struct AP_Declaration_Of_Public_key {","highlight_start":12,"highlight_end":40}],"label":null,"suggested_replacement":"ApDeclarationOfPublicKey","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `AP_Declaration_Of_Public_key` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:54:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct AP_Declaration_Of_Public_key {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `ApDeclarationOfPublicKey`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_camel_case_types)]` on by default\u001b[0m\n\n"}
{"message":"type `AP_Declaration_Of_Value` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":4706,"byte_end":4729,"line_start":209,"line_end":209,"column_start":12,"column_end":35,"is_primary":true,"text":[{"text":"pub struct AP_Declaration_Of_Value {","highlight_start":12,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":4706,"byte_end":4729,"line_start":209,"line_end":209,"column_start":12,"column_end":35,"is_primary":true,"text":[{"text":"pub struct AP_Declaration_Of_Value {","highlight_start":12,"highlight_end":35}],"label":null,"suggested_replacement":"ApDeclarationOfValue","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `AP_Declaration_Of_Value` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:209:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct AP_Declaration_Of_Value {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `ApDeclarationOfValue`\u001b[0m\n\n"}
{"message":"unnecessary braces around method argument","code":{"code":"unused_braces","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":15149,"byte_end":15196,"line_start":586,"line_end":586,"column_start":22,"column_end":69,"is_primary":true,"text":[{"text":"                .map({ |(hash, I)| CurveVector { x: *hash, y: *I } })","highlight_start":22,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_braces)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove these braces","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":15149,"byte_end":15196,"line_start":586,"line_end":586,"column_start":22,"column_end":69,"is_primary":true,"text":[{"text":"                .map({ |(hash, I)| CurveVector { x: *hash, y: *I } })","highlight_start":22,"highlight_end":69}],"label":null,"suggested_replacement":" |(hash, I)| CurveVector { x: *hash, y: *I } ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary braces around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:586:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                .map({ |(hash, I)| CurveVector { x: *hash, y: *I } })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove these braces\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_braces)]` on by default\u001b[0m\n\n"}
{"message":"unnecessary braces around method argument","code":{"code":"unused_braces","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":15430,"byte_end":15450,"line_start":595,"line_end":595,"column_start":22,"column_end":42,"is_primary":true,"text":[{"text":"                .map({ |c| c.commitment })","highlight_start":22,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these braces","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":15430,"byte_end":15450,"line_start":595,"line_end":595,"column_start":22,"column_end":42,"is_primary":true,"text":[{"text":"                .map({ |c| c.commitment })","highlight_start":22,"highlight_end":42}],"label":null,"suggested_replacement":" |c| c.commitment ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary braces around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:595:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                .map({ |c| c.commitment })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove these braces\u001b[0m\n\n"}
{"message":"unnecessary braces around method argument","code":{"code":"unused_braces","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":19702,"byte_end":19749,"line_start":731,"line_end":731,"column_start":22,"column_end":69,"is_primary":true,"text":[{"text":"                .map({ |(hash, I)| CurveVector { x: *hash, y: *I } })","highlight_start":22,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these braces","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":19702,"byte_end":19749,"line_start":731,"line_end":731,"column_start":22,"column_end":69,"is_primary":true,"text":[{"text":"                .map({ |(hash, I)| CurveVector { x: *hash, y: *I } })","highlight_start":22,"highlight_end":69}],"label":null,"suggested_replacement":" |(hash, I)| CurveVector { x: *hash, y: *I } ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary braces around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:731:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                .map({ |(hash, I)| CurveVector { x: *hash, y: *I } })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove these braces\u001b[0m\n\n"}
{"message":"unnecessary braces around method argument","code":{"code":"unused_braces","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":19995,"byte_end":20015,"line_start":740,"line_end":740,"column_start":22,"column_end":42,"is_primary":true,"text":[{"text":"                .map({ |c| c.commitment })","highlight_start":22,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these braces","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":19995,"byte_end":20015,"line_start":740,"line_end":740,"column_start":22,"column_end":42,"is_primary":true,"text":[{"text":"                .map({ |c| c.commitment })","highlight_start":22,"highlight_end":42}],"label":null,"suggested_replacement":" |c| c.commitment ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary braces around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:740:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m740\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                .map({ |c| c.commitment })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove these braces\u001b[0m\n\n"}
{"message":"unused import: `curve25519_dalek::edwards::CompressedEdwardsY`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/value_bound_signature.rs","byte_start":43,"byte_end":88,"line_start":3,"line_end":3,"column_start":5,"column_end":50,"is_primary":true,"text":[{"text":"use curve25519_dalek::edwards::CompressedEdwardsY;","highlight_start":5,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/value_bound_signature.rs","byte_start":39,"byte_end":89,"line_start":3,"line_end":3,"column_start":1,"column_end":51,"is_primary":true,"text":[{"text":"use curve25519_dalek::edwards::CompressedEdwardsY;","highlight_start":1,"highlight_end":51}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `curve25519_dalek::edwards::CompressedEdwardsY`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/value_bound_signature.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse curve25519_dalek::edwards::CompressedEdwardsY;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `curve25519_dalek::traits::IsIdentity`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/value_bound_signature.rs","byte_start":177,"byte_end":213,"line_start":6,"line_end":6,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"use curve25519_dalek::traits::IsIdentity;","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/value_bound_signature.rs","byte_start":173,"byte_end":214,"line_start":6,"line_end":6,"column_start":1,"column_end":42,"is_primary":true,"text":[{"text":"use curve25519_dalek::traits::IsIdentity;","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `curve25519_dalek::traits::IsIdentity`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/value_bound_signature.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse curve25519_dalek::traits::IsIdentity;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `rand_core::RngCore`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/value_bound_signature.rs","byte_start":220,"byte_end":238,"line_start":8,"line_end":8,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use rand_core::RngCore;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/value_bound_signature.rs","byte_start":216,"byte_end":239,"line_start":8,"line_end":8,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use rand_core::RngCore;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rand_core::RngCore`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/value_bound_signature.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse rand_core::RngCore;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `sha2::Digest`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/kyc_proof.rs","byte_start":145,"byte_end":157,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"use sha2::Digest;","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sha2::Digest`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/kyc_proof.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sha2::Digest;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `sha2::Digest`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":247,"byte_end":259,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"use sha2::Digest;","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sha2::Digest`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sha2::Digest;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused variable: `j`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/range_proof.rs","byte_start":2185,"byte_end":2186,"line_start":92,"line_end":92,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        for j in 0..8 {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/range_proof.rs","byte_start":2185,"byte_end":2186,"line_start":92,"line_end":92,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        for j in 0..8 {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"_j","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `j`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/range_proof.rs:92:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        for j in 0..8 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_j`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `Sp`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2867,"byte_end":2869,"line_start":117,"line_end":117,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2867,"byte_end":2869,"line_start":117,"line_end":117,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"_Sp","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `Sp`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:117:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Sp: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_Sp`\u001b[0m\n\n"}
{"message":"unused variable: `Sp`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3698,"byte_end":3700,"line_start":160,"line_end":160,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3698,"byte_end":3700,"line_start":160,"line_end":160,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"_Sp","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `Sp`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:160:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Sp: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_Sp`\u001b[0m\n\n"}
{"message":"unused variable: `pAP_key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1933,"byte_end":1940,"line_start":84,"line_end":84,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"        pAP_key: EdwardsPoint,","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1933,"byte_end":1940,"line_start":84,"line_end":84,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"        pAP_key: EdwardsPoint,","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":"_pAP_key","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `pAP_key`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:84:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pAP_key: EdwardsPoint,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_pAP_key`\u001b[0m\n\n"}
{"message":"function is never used: `mult_ed_single`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":2620,"byte_end":2634,"line_start":103,"line_end":103,"column_start":4,"column_end":18,"is_primary":true,"text":[{"text":"fn mult_ed_single(x: Scalar, a: &[EdwardsPoint]) -> Vec<EdwardsPoint> {","highlight_start":4,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function is never used: `mult_ed_single`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:103:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn mult_ed_single(x: Scalar, a: &[EdwardsPoint]) -> Vec<EdwardsPoint> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"function is never used: `scalars_array_from_bits`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":9073,"byte_end":9096,"line_start":362,"line_end":362,"column_start":4,"column_end":27,"is_primary":true,"text":[{"text":"fn scalars_array_from_bits(v: u64) -> [Scalar; RANGE_SIZE] {","highlight_start":4,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function is never used: `scalars_array_from_bits`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:362:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn scalars_array_from_bits(v: u64) -> [Scalar; RANGE_SIZE] {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"function is never used: `add_scalar_to_array`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":9663,"byte_end":9682,"line_start":386,"line_end":386,"column_start":4,"column_end":23,"is_primary":true,"text":[{"text":"fn add_scalar_to_array(a: &[Scalar], b: Scalar) -> Vec<Scalar> {","highlight_start":4,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function is never used: `add_scalar_to_array`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:386:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m386\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn add_scalar_to_array(a: &[Scalar], b: Scalar) -> Vec<Scalar> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"field is never read: `C`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":9831,"byte_end":9846,"line_start":408,"line_end":408,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    C: EdwardsPoint,","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `C`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:408:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    C: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"field is never read: `D`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":9852,"byte_end":9867,"line_start":409,"line_end":409,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    D: EdwardsPoint,","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `D`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:409:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    D: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"field is never read: `totalSpendingCommitment`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":9873,"byte_end":9910,"line_start":410,"line_end":410,"column_start":5,"column_end":42,"is_primary":true,"text":[{"text":"    totalSpendingCommitment: EdwardsPoint","highlight_start":5,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `totalSpendingCommitment`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:410:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m410\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    totalSpendingCommitment: EdwardsPoint\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"field is never read: `one_time_key`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/value_bound_signature.rs","byte_start":306,"byte_end":331,"line_start":13,"line_end":13,"column_start":5,"column_end":30,"is_primary":true,"text":[{"text":"    one_time_key: CurveVector,","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `one_time_key`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/value_bound_signature.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    one_time_key: CurveVector,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"function is never used: `create_random_divisions`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/value_bound_signature.rs","byte_start":3533,"byte_end":3556,"line_start":127,"line_end":127,"column_start":4,"column_end":27,"is_primary":true,"text":[{"text":"fn create_random_divisions(sum: Scalar, count: usize) -> Vec<Scalar> {","highlight_start":4,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function is never used: `create_random_divisions`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/value_bound_signature.rs:127:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn create_random_divisions(sum: Scalar, count: usize) -> Vec<Scalar> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the feature `no_std` has been stable since 1.6.0 and no longer requires an attribute to enable","code":{"code":"stable_features","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":32,"byte_end":38,"line_start":2,"line_end":2,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"#![feature(no_std)]","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(stable_features)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the feature `no_std` has been stable since 1.6.0 and no longer requires an attribute to enable\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:2:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#![feature(no_std)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(stable_features)]` on by default\u001b[0m\n\n"}
{"message":"variable `V` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":622,"byte_end":623,"line_start":29,"line_end":29,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"    pub fn insert(&mut self, V: CompressedEdwardsY, i: u64) {","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":622,"byte_end":623,"line_start":29,"line_end":29,"column_start":30,"column_end":31,"is_primary":true,"text":[{"text":"    pub fn insert(&mut self, V: CompressedEdwardsY, i: u64) {","highlight_start":30,"highlight_end":31}],"label":null,"suggested_replacement":"v","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `V` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:29:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn insert(&mut self, V: CompressedEdwardsY, i: u64) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `v`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"message":"variable `V` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":855,"byte_end":856,"line_start":35,"line_end":35,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"    pub fn get(&mut self, V: &CompressedEdwardsY) -> Option<u64> {","highlight_start":27,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":855,"byte_end":856,"line_start":35,"line_end":35,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"    pub fn get(&mut self, V: &CompressedEdwardsY) -> Option<u64> {","highlight_start":27,"highlight_end":28}],"label":null,"suggested_replacement":"v","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `V` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:35:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn get(&mut self, V: &CompressedEdwardsY) -> Option<u64> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `v`\u001b[0m\n\n"}
{"message":"variable `W` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1075,"byte_end":1076,"line_start":39,"line_end":39,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        for (W, i) in list {","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1075,"byte_end":1076,"line_start":39,"line_end":39,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        for (W, i) in list {","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":"w","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `W` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:39:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        for (W, i) in list {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `w`\u001b[0m\n\n"}
{"message":"variable `G` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1239,"byte_end":1240,"line_start":48,"line_end":48,"column_start":36,"column_end":37,"is_primary":true,"text":[{"text":"pub fn discrete_log_2n_bit(n: u64, G: EdwardsPoint, H: EdwardsPoint) -> u64 {","highlight_start":36,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1239,"byte_end":1240,"line_start":48,"line_end":48,"column_start":36,"column_end":37,"is_primary":true,"text":[{"text":"pub fn discrete_log_2n_bit(n: u64, G: EdwardsPoint, H: EdwardsPoint) -> u64 {","highlight_start":36,"highlight_end":37}],"label":null,"suggested_replacement":"g","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `G` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:48:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn discrete_log_2n_bit(n: u64, G: EdwardsPoint, H: EdwardsPoint) -> u64 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `g`\u001b[0m\n\n"}
{"message":"variable `H` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1256,"byte_end":1257,"line_start":48,"line_end":48,"column_start":53,"column_end":54,"is_primary":true,"text":[{"text":"pub fn discrete_log_2n_bit(n: u64, G: EdwardsPoint, H: EdwardsPoint) -> u64 {","highlight_start":53,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1256,"byte_end":1257,"line_start":48,"line_end":48,"column_start":53,"column_end":54,"is_primary":true,"text":[{"text":"pub fn discrete_log_2n_bit(n: u64, G: EdwardsPoint, H: EdwardsPoint) -> u64 {","highlight_start":53,"highlight_end":54}],"label":null,"suggested_replacement":"h","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `H` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:48:53\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn discrete_log_2n_bit(n: u64, G: EdwardsPoint, H: EdwardsPoint) -> u64 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `h`\u001b[0m\n\n"}
{"message":"variable `V` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1370,"byte_end":1371,"line_start":51,"line_end":51,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    let mut V = EdwardsPoint::default();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1370,"byte_end":1371,"line_start":51,"line_end":51,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    let mut V = EdwardsPoint::default();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"v","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `V` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:51:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut V = EdwardsPoint::default();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `v`\u001b[0m\n\n"}
{"message":"variable `C` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1464,"byte_end":1465,"line_start":55,"line_end":55,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let C = V.compress();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1464,"byte_end":1465,"line_start":55,"line_end":55,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let C = V.compress();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"c","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:55:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let C = V.compress();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c`\u001b[0m\n\n"}
{"message":"variable `S` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1594,"byte_end":1595,"line_start":60,"line_end":60,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    let mut S = H;","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1594,"byte_end":1595,"line_start":60,"line_end":60,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    let mut S = H;","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"s","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `S` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:60:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut S = H;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `s`\u001b[0m\n\n"}
{"message":"variable `C` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1644,"byte_end":1645,"line_start":62,"line_end":62,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let C = S.compress();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":1644,"byte_end":1645,"line_start":62,"line_end":62,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let C = S.compress();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"c","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:62:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let C = S.compress();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c`\u001b[0m\n\n"}
{"message":"structure field `Ls` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":3575,"byte_end":3577,"line_start":141,"line_end":141,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Ls: Vec<EdwardsPoint>,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":3575,"byte_end":3577,"line_start":141,"line_end":141,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Ls: Vec<EdwardsPoint>,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"ls","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Ls` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:141:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Ls: Vec<EdwardsPoint>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ls`\u001b[0m\n\n"}
{"message":"structure field `Rs` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":3602,"byte_end":3604,"line_start":142,"line_end":142,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Rs: Vec<EdwardsPoint>,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":3602,"byte_end":3604,"line_start":142,"line_end":142,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Rs: Vec<EdwardsPoint>,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"rs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Rs` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:142:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Rs: Vec<EdwardsPoint>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rs`\u001b[0m\n\n"}
{"message":"variable `Ls` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4071,"byte_end":4073,"line_start":165,"line_end":165,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"    let mut Ls = Vec::new();","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4071,"byte_end":4073,"line_start":165,"line_end":165,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"    let mut Ls = Vec::new();","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":"ls","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Ls` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:165:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut Ls = Vec::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ls`\u001b[0m\n\n"}
{"message":"variable `Rs` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4100,"byte_end":4102,"line_start":166,"line_end":166,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"    let mut Rs = Vec::new();","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4100,"byte_end":4102,"line_start":166,"line_end":166,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"    let mut Rs = Vec::new();","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":"rs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Rs` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:166:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut Rs = Vec::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rs`\u001b[0m\n\n"}
{"message":"variable `G` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4129,"byte_end":4130,"line_start":167,"line_end":167,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    let mut G = g.to_vec();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4129,"byte_end":4130,"line_start":167,"line_end":167,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    let mut G = g.to_vec();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"g","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `G` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:167:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut G = g.to_vec();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `g`\u001b[0m\n\n"}
{"message":"variable `H` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4157,"byte_end":4158,"line_start":168,"line_end":168,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    let mut H = h.to_vec();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4157,"byte_end":4158,"line_start":168,"line_end":168,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    let mut H = h.to_vec();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"h","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `H` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:168:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut H = h.to_vec();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `h`\u001b[0m\n\n"}
{"message":"variable `L` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4225,"byte_end":4226,"line_start":171,"line_end":171,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        let (L, R, a_, b_, x) = create_bulletproof_one_step(n_, &G, &H, &u, &a__, &b__);","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4225,"byte_end":4226,"line_start":171,"line_end":171,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        let (L, R, a_, b_, x) = create_bulletproof_one_step(n_, &G, &H, &u, &a__, &b__);","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":"l","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `L` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:171:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let (L, R, a_, b_, x) = create_bulletproof_one_step(n_, &G, &H, &u, &a__, &b__);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `l`\u001b[0m\n\n"}
{"message":"variable `R` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4228,"byte_end":4229,"line_start":171,"line_end":171,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"        let (L, R, a_, b_, x) = create_bulletproof_one_step(n_, &G, &H, &u, &a__, &b__);","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":4228,"byte_end":4229,"line_start":171,"line_end":171,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"        let (L, R, a_, b_, x) = create_bulletproof_one_step(n_, &G, &H, &u, &a__, &b__);","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"r","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `R` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:171:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let (L, R, a_, b_, x) = create_bulletproof_one_step(n_, &G, &H, &u, &a__, &b__);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `r`\u001b[0m\n\n"}
{"message":"variable `L` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":5115,"byte_end":5116,"line_start":207,"line_end":207,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let L = multiscalar_mul_add(a1, &g[n_..], b2, &h[0..n_]) + inner_product(a1, b2) * u;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":5115,"byte_end":5116,"line_start":207,"line_end":207,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let L = multiscalar_mul_add(a1, &g[n_..], b2, &h[0..n_]) + inner_product(a1, b2) * u;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"l","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `L` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:207:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let L = multiscalar_mul_add(a1, &g[n_..], b2, &h[0..n_]) + inner_product(a1, b2) * u;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `l`\u001b[0m\n\n"}
{"message":"variable `R` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":5205,"byte_end":5206,"line_start":208,"line_end":208,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = multiscalar_mul_add(a2, &g[0..n_], b1, &h[n_..]) + inner_product(a2, b1) * u;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":5205,"byte_end":5206,"line_start":208,"line_end":208,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = multiscalar_mul_add(a2, &g[0..n_], b1, &h[n_..]) + inner_product(a2, b1) * u;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"r","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `R` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:208:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let R = multiscalar_mul_add(a2, &g[0..n_], b1, &h[n_..]) + inner_product(a2, b1) * u;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `r`\u001b[0m\n\n"}
{"message":"function `bullet_range_proof_ex_T1_T2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":15262,"byte_end":15289,"line_start":585,"line_end":585,"column_start":4,"column_end":31,"is_primary":true,"text":[{"text":"fn bullet_range_proof_ex_T1_T2(","highlight_start":4,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":15262,"byte_end":15289,"line_start":585,"line_end":585,"column_start":4,"column_end":31,"is_primary":true,"text":[{"text":"fn bullet_range_proof_ex_T1_T2(","highlight_start":4,"highlight_end":31}],"label":null,"suggested_replacement":"bullet_range_proof_ex_t1_t2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `bullet_range_proof_ex_T1_T2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:585:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn bullet_range_proof_ex_T1_T2(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `bullet_range_proof_ex_t1_t2`\u001b[0m\n\n"}
{"message":"variable `aL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16093,"byte_end":16095,"line_start":618,"line_end":618,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let aL = scalars_vec_from_bits_of_values_array(&v);","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16093,"byte_end":16095,"line_start":618,"line_end":618,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let aL = scalars_vec_from_bits_of_values_array(&v);","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"a_l","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `aL` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:618:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let aL = scalars_vec_from_bits_of_values_array(&v);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a_l`\u001b[0m\n\n"}
{"message":"variable `aR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16150,"byte_end":16152,"line_start":620,"line_end":620,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let aR = substract_scalar_arrays(&aL, &to_the_n(Scalar::from(1u64), RANGE_SIZE * m));","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16150,"byte_end":16152,"line_start":620,"line_end":620,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let aR = substract_scalar_arrays(&aL, &to_the_n(Scalar::from(1u64), RANGE_SIZE * m));","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"a_r","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `aR` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:620:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m620\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let aR = substract_scalar_arrays(&aL, &to_the_n(Scalar::from(1u64), RANGE_SIZE * m));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a_r`\u001b[0m\n\n"}
{"message":"variable `sL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16336,"byte_end":16338,"line_start":624,"line_end":624,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"    let mut sL = vec![Scalar::default(); RANGE_SIZE * m];","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16336,"byte_end":16338,"line_start":624,"line_end":624,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"    let mut sL = vec![Scalar::default(); RANGE_SIZE * m];","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":"s_l","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `sL` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:624:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut sL = vec![Scalar::default(); RANGE_SIZE * m];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `s_l`\u001b[0m\n\n"}
{"message":"variable `sR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16394,"byte_end":16396,"line_start":625,"line_end":625,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"    let mut sR = vec![Scalar::default(); RANGE_SIZE * m];","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16394,"byte_end":16396,"line_start":625,"line_end":625,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"    let mut sR = vec![Scalar::default(); RANGE_SIZE * m];","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":"s_r","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `sR` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:625:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let mut sR = vec![Scalar::default(); RANGE_SIZE * m];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `s_r`\u001b[0m\n\n"}
{"message":"variable `A` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16560,"byte_end":16561,"line_start":630,"line_end":630,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let A = alpha * h + multiscalar_mul_add(&aL, &gs, &aR, &hs);","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16560,"byte_end":16561,"line_start":630,"line_end":630,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let A = alpha * h + multiscalar_mul_add(&aL, &gs, &aR, &hs);","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:630:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m630\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let A = alpha * h + multiscalar_mul_add(&aL, &gs, &aR, &hs);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `SS` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16625,"byte_end":16627,"line_start":631,"line_end":631,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let SS = rho * h + multiscalar_mul_add(&sL, &gs, &sR, &hs);","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":16625,"byte_end":16627,"line_start":631,"line_end":631,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let SS = rho * h + multiscalar_mul_add(&sL, &gs, &sR, &hs);","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"ss","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SS` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:631:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m631\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let SS = rho * h + multiscalar_mul_add(&sL, &gs, &sR, &hs);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `ss`\u001b[0m\n\n"}
{"message":"variable `T1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17354,"byte_end":17356,"line_start":652,"line_end":652,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let T1 = g * t1 + h * tao1;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17354,"byte_end":17356,"line_start":652,"line_end":652,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let T1 = g * t1 + h * tao1;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"t1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `T1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:652:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m652\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let T1 = g * t1 + h * tao1;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t1`\u001b[0m\n\n"}
{"message":"variable `T2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17386,"byte_end":17388,"line_start":653,"line_end":653,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let T2 = g * t2 + h * tao2;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17386,"byte_end":17388,"line_start":653,"line_end":653,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let T2 = g * t2 + h * tao2;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"t2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `T2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:653:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m653\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let T2 = g * t2 + h * tao2;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t2`\u001b[0m\n\n"}
{"message":"variable `T1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17574,"byte_end":17576,"line_start":661,"line_end":661,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    T1: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17574,"byte_end":17576,"line_start":661,"line_end":661,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    T1: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"t1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `T1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:661:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m661\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    T1: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t1`\u001b[0m\n\n"}
{"message":"variable `T2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17596,"byte_end":17598,"line_start":662,"line_end":662,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    T2: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17596,"byte_end":17598,"line_start":662,"line_end":662,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    T2: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"t2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `T2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:662:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m662\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    T2: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t2`\u001b[0m\n\n"}
{"message":"variable `A` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17857,"byte_end":17858,"line_start":675,"line_end":675,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    A: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17857,"byte_end":17858,"line_start":675,"line_end":675,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    A: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:675:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m675\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    A: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `SS` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17878,"byte_end":17880,"line_start":676,"line_end":676,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    SS: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":17878,"byte_end":17880,"line_start":676,"line_end":676,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    SS: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"ss","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SS` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:676:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m676\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    SS: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `ss`\u001b[0m\n\n"}
{"message":"variable `V` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":18549,"byte_end":18550,"line_start":700,"line_end":700,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let V: Vec<EdwardsPoint> = v","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":18549,"byte_end":18550,"line_start":700,"line_end":700,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let V: Vec<EdwardsPoint> = v","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"v","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `V` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:700:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m700\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let V: Vec<EdwardsPoint> = v\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `v`\u001b[0m\n\n"}
{"message":"variable `P` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":19936,"byte_end":19937,"line_start":748,"line_end":748,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let P = private_key * bases.GInit;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":19936,"byte_end":19937,"line_start":748,"line_end":748,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let P = private_key * bases.GInit;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"p","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `P` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:748:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m748\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let P = private_key * bases.GInit;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `p`\u001b[0m\n\n"}
{"message":"variable `R` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":19975,"byte_end":19976,"line_start":749,"line_end":749,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = r * bases.GInit;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":19975,"byte_end":19976,"line_start":749,"line_end":749,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = r * bases.GInit;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"r","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `R` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:749:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m749\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let R = r * bases.GInit;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `r`\u001b[0m\n\n"}
{"message":"variable `P` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":20272,"byte_end":20273,"line_start":760,"line_end":760,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    P: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":20272,"byte_end":20273,"line_start":760,"line_end":760,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    P: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"p","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `P` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:760:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m760\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    P: &EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `p`\u001b[0m\n\n"}
{"message":"variable `R` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":20383,"byte_end":20384,"line_start":764,"line_end":764,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = EdwardsPoint::multiscalar_mul(&[signature.0, signature.1], &[bases.GInit, *P]);","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":20383,"byte_end":20384,"line_start":764,"line_end":764,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = EdwardsPoint::multiscalar_mul(&[signature.0, signature.1], &[bases.GInit, *P]);","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"r","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `R` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:764:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m764\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let R = EdwardsPoint::multiscalar_mul(&[signature.0, signature.1], &[bases.GInit, *P]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `r`\u001b[0m\n\n"}
{"message":"variable `AP_pr_key` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":20845,"byte_end":20854,"line_start":779,"line_end":779,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    AP_pr_key: Scalar,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":20845,"byte_end":20854,"line_start":779,"line_end":779,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    AP_pr_key: Scalar,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":"ap_pr_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `AP_pr_key` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:779:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m779\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    AP_pr_key: Scalar,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ap_pr_key`\u001b[0m\n\n"}
{"message":"variable `V` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":20927,"byte_end":20928,"line_start":782,"line_end":782,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let V = v * bases.GInit + gamma * bases.HInit;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":20927,"byte_end":20928,"line_start":782,"line_end":782,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let V = v * bases.GInit + gamma * bases.HInit;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"v","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `V` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:782:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m782\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let V = v * bases.GInit + gamma * bases.HInit;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `v`\u001b[0m\n\n"}
{"message":"variable `T1_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21106,"byte_end":21109,"line_start":786,"line_end":786,"column_start":10,"column_end":13,"is_primary":true,"text":[{"text":"    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =","highlight_start":10,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21106,"byte_end":21109,"line_start":786,"line_end":786,"column_start":10,"column_end":13,"is_primary":true,"text":[{"text":"    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =","highlight_start":10,"highlight_end":13}],"label":null,"suggested_replacement":"t1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `T1_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:786:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m786\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t1`\u001b[0m\n\n"}
{"message":"variable `T2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21111,"byte_end":21113,"line_start":786,"line_end":786,"column_start":15,"column_end":17,"is_primary":true,"text":[{"text":"    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =","highlight_start":15,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21111,"byte_end":21113,"line_start":786,"line_end":786,"column_start":15,"column_end":17,"is_primary":true,"text":[{"text":"    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =","highlight_start":15,"highlight_end":17}],"label":null,"suggested_replacement":"t2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `T2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:786:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m786\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t2`\u001b[0m\n\n"}
{"message":"variable `A` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21169,"byte_end":21170,"line_start":786,"line_end":786,"column_start":73,"column_end":74,"is_primary":true,"text":[{"text":"    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =","highlight_start":73,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21169,"byte_end":21170,"line_start":786,"line_end":786,"column_start":73,"column_end":74,"is_primary":true,"text":[{"text":"    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =","highlight_start":73,"highlight_end":74}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:786:73\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m786\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `SS` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21172,"byte_end":21174,"line_start":786,"line_end":786,"column_start":76,"column_end":78,"is_primary":true,"text":[{"text":"    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =","highlight_start":76,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21172,"byte_end":21174,"line_start":786,"line_end":786,"column_start":76,"column_end":78,"is_primary":true,"text":[{"text":"    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =","highlight_start":76,"highlight_end":78}],"label":null,"suggested_replacement":"ss","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SS` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:786:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m786\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let (T1_, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v__, gamma) =\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `ss`\u001b[0m\n\n"}
{"message":"variable `T1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21319,"byte_end":21321,"line_start":790,"line_end":790,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let T1 = T1_ - z * z * challenge.invert() * v_diff * bases.GInit;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21319,"byte_end":21321,"line_start":790,"line_end":790,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let T1 = T1_ - z * z * challenge.invert() * v_diff * bases.GInit;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"t1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `T1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:790:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let T1 = T1_ - z * z * challenge.invert() * v_diff * bases.GInit;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t1`\u001b[0m\n\n"}
{"message":"variable `AP_key` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21931,"byte_end":21937,"line_start":807,"line_end":807,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    AP_key: &EdwardsPoint,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":21931,"byte_end":21937,"line_start":807,"line_end":807,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    AP_key: &EdwardsPoint,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"ap_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `AP_key` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:807:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m807\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    AP_key: &EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ap_key`\u001b[0m\n\n"}
{"message":"variable `G` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22145,"byte_end":22146,"line_start":813,"line_end":813,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let G = bases.GInit;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22145,"byte_end":22146,"line_start":813,"line_end":813,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let G = bases.GInit;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"g","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `G` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:813:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m813\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let G = bases.GInit;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `g`\u001b[0m\n\n"}
{"message":"variable `R` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22170,"byte_end":22171,"line_start":814,"line_end":814,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = s * G + h * AP_key;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22170,"byte_end":22171,"line_start":814,"line_end":814,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = s * G + h * AP_key;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"r","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `R` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:814:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m814\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let R = s * G + h * AP_key;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `r`\u001b[0m\n\n"}
{"message":"variable `T1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22203,"byte_end":22205,"line_start":815,"line_end":815,"column_start":10,"column_end":12,"is_primary":true,"text":[{"text":"    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =","highlight_start":10,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22203,"byte_end":22205,"line_start":815,"line_end":815,"column_start":10,"column_end":12,"is_primary":true,"text":[{"text":"    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =","highlight_start":10,"highlight_end":12}],"label":null,"suggested_replacement":"t1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `T1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:815:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m815\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t1`\u001b[0m\n\n"}
{"message":"variable `T2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22207,"byte_end":22209,"line_start":815,"line_end":815,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =","highlight_start":14,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22207,"byte_end":22209,"line_start":815,"line_end":815,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =","highlight_start":14,"highlight_end":16}],"label":null,"suggested_replacement":"t2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `T2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:815:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m815\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t2`\u001b[0m\n\n"}
{"message":"variable `A` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22265,"byte_end":22266,"line_start":815,"line_end":815,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22265,"byte_end":22266,"line_start":815,"line_end":815,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =","highlight_start":72,"highlight_end":73}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:815:72\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m815\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `SS` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22268,"byte_end":22270,"line_start":815,"line_end":815,"column_start":75,"column_end":77,"is_primary":true,"text":[{"text":"    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =","highlight_start":75,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22268,"byte_end":22270,"line_start":815,"line_end":815,"column_start":75,"column_end":77,"is_primary":true,"text":[{"text":"    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =","highlight_start":75,"highlight_end":77}],"label":null,"suggested_replacement":"ss","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SS` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:815:75\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m815\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let (T1, T2, l0, r0, l1, r1, tao1, tao2, z, m, alpha, rho, gs, hs, A, SS, y, v, gamma) =\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `ss`\u001b[0m\n\n"}
{"message":"variable `AP_key` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22871,"byte_end":22877,"line_start":833,"line_end":833,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    AP_key: &EdwardsPoint,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22871,"byte_end":22877,"line_start":833,"line_end":833,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    AP_key: &EdwardsPoint,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"ap_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `AP_key` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:833:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m833\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    AP_key: &EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ap_key`\u001b[0m\n\n"}
{"message":"variable `T1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22934,"byte_end":22936,"line_start":836,"line_end":836,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let T1 = proof.range_proof.T1;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22934,"byte_end":22936,"line_start":836,"line_end":836,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let T1 = proof.range_proof.T1;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"t1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `T1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:836:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m836\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let T1 = proof.range_proof.T1;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t1`\u001b[0m\n\n"}
{"message":"variable `T2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22969,"byte_end":22971,"line_start":837,"line_end":837,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let T2 = proof.range_proof.T2;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":22969,"byte_end":22971,"line_start":837,"line_end":837,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let T2 = proof.range_proof.T2;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"t2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `T2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:837:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let T2 = proof.range_proof.T2;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `t2`\u001b[0m\n\n"}
{"message":"variable `P` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23004,"byte_end":23005,"line_start":838,"line_end":838,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let P = AP_key;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23004,"byte_end":23005,"line_start":838,"line_end":838,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let P = AP_key;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"p","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `P` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:838:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m838\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let P = AP_key;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `p`\u001b[0m\n\n"}
{"message":"variable `R` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23024,"byte_end":23025,"line_start":839,"line_end":839,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = EdwardsPoint::multiscalar_mul(&[proof.schnorr.0, proof.schnorr.1], &[bases.GInit, *P]);","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23024,"byte_end":23025,"line_start":839,"line_end":839,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let R = EdwardsPoint::multiscalar_mul(&[proof.schnorr.0, proof.schnorr.1], &[bases.GInit, *P]);","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"r","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `R` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:839:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let R = EdwardsPoint::multiscalar_mul(&[proof.schnorr.0, proof.schnorr.1], &[bases.GInit, *P]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `r`\u001b[0m\n\n"}
{"message":"structure field `GInit` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23726,"byte_end":23731,"line_start":862,"line_end":862,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    GInit: EdwardsPoint,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23726,"byte_end":23731,"line_start":862,"line_end":862,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    GInit: EdwardsPoint,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":"ginit","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `GInit` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:862:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m862\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    GInit: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ginit`\u001b[0m\n\n"}
{"message":"structure field `HInit` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23751,"byte_end":23756,"line_start":863,"line_end":863,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    HInit: EdwardsPoint,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23751,"byte_end":23756,"line_start":863,"line_end":863,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    HInit: EdwardsPoint,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":"hinit","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `HInit` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:863:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m863\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    HInit: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `hinit`\u001b[0m\n\n"}
{"message":"structure field `Gs` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23776,"byte_end":23778,"line_start":864,"line_end":864,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Gs: Vec<EdwardsPoint>,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23776,"byte_end":23778,"line_start":864,"line_end":864,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Gs: Vec<EdwardsPoint>,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"gs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Gs` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:864:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m864\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Gs: Vec<EdwardsPoint>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `gs`\u001b[0m\n\n"}
{"message":"structure field `Hs` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23803,"byte_end":23805,"line_start":865,"line_end":865,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Hs: Vec<EdwardsPoint>,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23803,"byte_end":23805,"line_start":865,"line_end":865,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Hs: Vec<EdwardsPoint>,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"hs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Hs` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:865:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m865\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Hs: Vec<EdwardsPoint>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `hs`\u001b[0m\n\n"}
{"message":"variable `GInit` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23857,"byte_end":23862,"line_start":869,"line_end":869,"column_start":16,"column_end":21,"is_primary":true,"text":[{"text":"    pub fn new(GInit: EdwardsPoint, HInit: EdwardsPoint, max_len: usize) -> Bases {","highlight_start":16,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23857,"byte_end":23862,"line_start":869,"line_end":869,"column_start":16,"column_end":21,"is_primary":true,"text":[{"text":"    pub fn new(GInit: EdwardsPoint, HInit: EdwardsPoint, max_len: usize) -> Bases {","highlight_start":16,"highlight_end":21}],"label":null,"suggested_replacement":"ginit","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `GInit` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:869:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m869\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn new(GInit: EdwardsPoint, HInit: EdwardsPoint, max_len: usize) -> Bases {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ginit`\u001b[0m\n\n"}
{"message":"variable `HInit` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23878,"byte_end":23883,"line_start":869,"line_end":869,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"    pub fn new(GInit: EdwardsPoint, HInit: EdwardsPoint, max_len: usize) -> Bases {","highlight_start":37,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bulletproofs.rs","byte_start":23878,"byte_end":23883,"line_start":869,"line_end":869,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"    pub fn new(GInit: EdwardsPoint, HInit: EdwardsPoint, max_len: usize) -> Bases {","highlight_start":37,"highlight_end":42}],"label":null,"suggested_replacement":"hinit","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `HInit` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bulletproofs.rs:869:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m869\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn new(GInit: EdwardsPoint, HInit: EdwardsPoint, max_len: usize) -> Bases {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `hinit`\u001b[0m\n\n"}
{"message":"structure field `Z` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1207,"byte_end":1208,"line_start":57,"line_end":57,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Z: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1207,"byte_end":1208,"line_start":57,"line_end":57,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Z: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"z","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Z` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:57:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Z: EdwardsPoint,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `z`\u001b[0m\n\n"}
{"message":"structure field `X` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1228,"byte_end":1229,"line_start":58,"line_end":58,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    X: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1228,"byte_end":1229,"line_start":58,"line_end":58,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    X: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"x","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `X` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:58:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    X: EdwardsPoint,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `x`\u001b[0m\n\n"}
{"message":"structure field `Y` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1249,"byte_end":1250,"line_start":59,"line_end":59,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Y: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1249,"byte_end":1250,"line_start":59,"line_end":59,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Y: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"y","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Y` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:59:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Y: EdwardsPoint,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `y`\u001b[0m\n\n"}
{"message":"structure field `Qs` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1270,"byte_end":1272,"line_start":60,"line_end":60,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Qs: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1270,"byte_end":1272,"line_start":60,"line_end":60,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Qs: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"qs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Qs` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:60:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Qs: EdwardsPoint,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `qs`\u001b[0m\n\n"}
{"message":"structure field `Qsz` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1292,"byte_end":1295,"line_start":61,"line_end":61,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    Qsz: EdwardsPoint,","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1292,"byte_end":1295,"line_start":61,"line_end":61,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    Qsz: EdwardsPoint,","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":"qsz","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Qsz` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:61:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Qsz: EdwardsPoint,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `qsz`\u001b[0m\n\n"}
{"message":"structure field `Z` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1523,"byte_end":1524,"line_start":70,"line_end":70,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Z: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1523,"byte_end":1524,"line_start":70,"line_end":70,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Z: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"z","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Z` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:70:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Z: EdwardsPoint,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `z`\u001b[0m\n\n"}
{"message":"structure field `AP_public_key` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1577,"byte_end":1590,"line_start":73,"line_end":73,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    AP_public_key: EdwardsPoint,","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1577,"byte_end":1590,"line_start":73,"line_end":73,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    AP_public_key: EdwardsPoint,","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":"ap_public_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `AP_public_key` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:73:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    AP_public_key: EdwardsPoint,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ap_public_key`\u001b[0m\n\n"}
{"message":"structure field `S_vector` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1610,"byte_end":1618,"line_start":74,"line_end":74,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    S_vector: CurveVector,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1610,"byte_end":1618,"line_start":74,"line_end":74,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    S_vector: CurveVector,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":"s_vector","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `S_vector` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:74:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    S_vector: CurveVector,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `s_vector`\u001b[0m\n\n"}
{"message":"structure field `AP_Declaration_Of_Public_key` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1637,"byte_end":1665,"line_start":75,"line_end":75,"column_start":5,"column_end":33,"is_primary":true,"text":[{"text":"    AP_Declaration_Of_Public_key: AP_Declaration_Of_Public_key,","highlight_start":5,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1637,"byte_end":1665,"line_start":75,"line_end":75,"column_start":5,"column_end":33,"is_primary":true,"text":[{"text":"    AP_Declaration_Of_Public_key: AP_Declaration_Of_Public_key,","highlight_start":5,"highlight_end":33}],"label":null,"suggested_replacement":"ap_declaration_of_public_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `AP_Declaration_Of_Public_key` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:75:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    AP_Declaration_Of_Public_key: AP_Declaration_Of_Public_key,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ap_declaration_of_public_key`\u001b[0m\n\n"}
{"message":"structure field `AP_Declaration_Of_Value` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1701,"byte_end":1724,"line_start":76,"line_end":76,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    AP_Declaration_Of_Value: Vec<AP_Declaration_Of_Value>,","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1701,"byte_end":1724,"line_start":76,"line_end":76,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    AP_Declaration_Of_Value: Vec<AP_Declaration_Of_Value>,","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":"ap_declaration_of_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `AP_Declaration_Of_Value` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:76:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    AP_Declaration_Of_Value: Vec<AP_Declaration_Of_Value>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ap_declaration_of_value`\u001b[0m\n\n"}
{"message":"structure field `spendingLimitProof` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1795,"byte_end":1813,"line_start":78,"line_end":78,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    spendingLimitProof: SpendingLimitProof,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1795,"byte_end":1813,"line_start":78,"line_end":78,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    spendingLimitProof: SpendingLimitProof,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":"spending_limit_proof","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `spendingLimitProof` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:78:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    spendingLimitProof: SpendingLimitProof,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `spending_limit_proof`\u001b[0m\n\n"}
{"message":"variable `pAP_key` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":1933,"byte_end":1940,"line_start":84,"line_end":84,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"        pAP_key: EdwardsPoint,","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":1933,"byte_end":1940,"line_start":84,"line_end":84,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"        pAP_key: EdwardsPoint,","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":"p_ap_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `pAP_key` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:84:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pAP_key: EdwardsPoint,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `p_ap_key`\u001b[0m\n\n"}
{"message":"variable `Z` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2044,"byte_end":2045,"line_start":87,"line_end":87,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        Z: EdwardsPoint,","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2044,"byte_end":2045,"line_start":87,"line_end":87,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        Z: EdwardsPoint,","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"z","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Z` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:87:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Z: EdwardsPoint,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `z`\u001b[0m\n\n"}
{"message":"variable `AP_public_key` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2110,"byte_end":2123,"line_start":90,"line_end":90,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        AP_public_key: EdwardsPoint,","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2110,"byte_end":2123,"line_start":90,"line_end":90,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        AP_public_key: EdwardsPoint,","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":"ap_public_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `AP_public_key` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:90:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        AP_public_key: EdwardsPoint,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ap_public_key`\u001b[0m\n\n"}
{"message":"variable `S_vector` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2147,"byte_end":2155,"line_start":91,"line_end":91,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        S_vector: CurveVector,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2147,"byte_end":2155,"line_start":91,"line_end":91,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        S_vector: CurveVector,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":"s_vector","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `S_vector` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:91:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        S_vector: CurveVector,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `s_vector`\u001b[0m\n\n"}
{"message":"variable `AP_Declaration_Of_Public_key` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2178,"byte_end":2206,"line_start":92,"line_end":92,"column_start":9,"column_end":37,"is_primary":true,"text":[{"text":"        AP_Declaration_Of_Public_key: AP_Declaration_Of_Public_key,","highlight_start":9,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2178,"byte_end":2206,"line_start":92,"line_end":92,"column_start":9,"column_end":37,"is_primary":true,"text":[{"text":"        AP_Declaration_Of_Public_key: AP_Declaration_Of_Public_key,","highlight_start":9,"highlight_end":37}],"label":null,"suggested_replacement":"ap_declaration_of_public_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `AP_Declaration_Of_Public_key` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:92:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        AP_Declaration_Of_Public_key: AP_Declaration_Of_Public_key,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ap_declaration_of_public_key`\u001b[0m\n\n"}
{"message":"variable `AP_Declaration_Of_Value` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2246,"byte_end":2269,"line_start":93,"line_end":93,"column_start":9,"column_end":32,"is_primary":true,"text":[{"text":"        AP_Declaration_Of_Value: Vec<AP_Declaration_Of_Value>,","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2246,"byte_end":2269,"line_start":93,"line_end":93,"column_start":9,"column_end":32,"is_primary":true,"text":[{"text":"        AP_Declaration_Of_Value: Vec<AP_Declaration_Of_Value>,","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":"ap_declaration_of_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `AP_Declaration_Of_Value` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:93:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        AP_Declaration_Of_Value: Vec<AP_Declaration_Of_Value>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ap_declaration_of_value`\u001b[0m\n\n"}
{"message":"variable `spendingLimitProof` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2348,"byte_end":2366,"line_start":95,"line_end":95,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"        spendingLimitProof: SpendingLimitProof,","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2348,"byte_end":2366,"line_start":95,"line_end":95,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"        spendingLimitProof: SpendingLimitProof,","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":"spending_limit_proof","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `spendingLimitProof` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:95:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        spendingLimitProof: SpendingLimitProof,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `spending_limit_proof`\u001b[0m\n\n"}
{"message":"function `verify_AP_declaration_of_public_key` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2765,"byte_end":2800,"line_start":114,"line_end":114,"column_start":4,"column_end":39,"is_primary":true,"text":[{"text":"fn verify_AP_declaration_of_public_key(","highlight_start":4,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2765,"byte_end":2800,"line_start":114,"line_end":114,"column_start":4,"column_end":39,"is_primary":true,"text":[{"text":"fn verify_AP_declaration_of_public_key(","highlight_start":4,"highlight_end":39}],"label":null,"suggested_replacement":"verify_ap_declaration_of_public_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `verify_AP_declaration_of_public_key` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:114:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn verify_AP_declaration_of_public_key(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `verify_ap_declaration_of_public_key`\u001b[0m\n\n"}
{"message":"variable `S` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2846,"byte_end":2847,"line_start":116,"line_end":116,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    S: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2846,"byte_end":2847,"line_start":116,"line_end":116,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    S: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"s","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `S` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:116:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    S: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `s`\u001b[0m\n\n"}
{"message":"variable `Sp` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2867,"byte_end":2869,"line_start":117,"line_end":117,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2867,"byte_end":2869,"line_start":117,"line_end":117,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"sp","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Sp` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:117:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Sp: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `sp`\u001b[0m\n\n"}
{"message":"variable `Q` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2889,"byte_end":2890,"line_start":118,"line_end":118,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Q: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2889,"byte_end":2890,"line_start":118,"line_end":118,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Q: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"q","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Q` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:118:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Q: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `q`\u001b[0m\n\n"}
{"message":"variable `G` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2926,"byte_end":2927,"line_start":120,"line_end":120,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let G = get_G();","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2926,"byte_end":2927,"line_start":120,"line_end":120,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let G = get_G();","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"g","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `G` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:120:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let G = get_G();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `g`\u001b[0m\n\n"}
{"message":"variable `Z` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2947,"byte_end":2948,"line_start":121,"line_end":121,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let Z = dec.Z;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2947,"byte_end":2948,"line_start":121,"line_end":121,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let Z = dec.Z;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"z","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Z` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:121:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Z = dec.Z;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `z`\u001b[0m\n\n"}
{"message":"variable `X` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2966,"byte_end":2967,"line_start":122,"line_end":122,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let X = dec.X;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2966,"byte_end":2967,"line_start":122,"line_end":122,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let X = dec.X;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"x","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `X` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:122:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let X = dec.X;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `x`\u001b[0m\n\n"}
{"message":"variable `Y` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":2985,"byte_end":2986,"line_start":123,"line_end":123,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let Y = dec.Y;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":2985,"byte_end":2986,"line_start":123,"line_end":123,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let Y = dec.Y;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"y","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Y` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:123:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Y = dec.Y;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `y`\u001b[0m\n\n"}
{"message":"variable `Qs` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3004,"byte_end":3006,"line_start":124,"line_end":124,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let Qs = dec.Qs;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3004,"byte_end":3006,"line_start":124,"line_end":124,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let Qs = dec.Qs;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"qs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Qs` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:124:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Qs = dec.Qs;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `qs`\u001b[0m\n\n"}
{"message":"variable `Qsz` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3025,"byte_end":3028,"line_start":125,"line_end":125,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let Qsz = dec.Qsz;","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3025,"byte_end":3028,"line_start":125,"line_end":125,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let Qsz = dec.Qsz;","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"qsz","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Qsz` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:125:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Qsz = dec.Qsz;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `qsz`\u001b[0m\n\n"}
{"message":"function `generate_AP_declaration_of_public_key` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3604,"byte_end":3641,"line_start":156,"line_end":156,"column_start":4,"column_end":41,"is_primary":true,"text":[{"text":"fn generate_AP_declaration_of_public_key(","highlight_start":4,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3604,"byte_end":3641,"line_start":156,"line_end":156,"column_start":4,"column_end":41,"is_primary":true,"text":[{"text":"fn generate_AP_declaration_of_public_key(","highlight_start":4,"highlight_end":41}],"label":null,"suggested_replacement":"generate_ap_declaration_of_public_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `generate_AP_declaration_of_public_key` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:156:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn generate_AP_declaration_of_public_key(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `generate_ap_declaration_of_public_key`\u001b[0m\n\n"}
{"message":"variable `S` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3677,"byte_end":3678,"line_start":159,"line_end":159,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    S: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3677,"byte_end":3678,"line_start":159,"line_end":159,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    S: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"s","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `S` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:159:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    S: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `s`\u001b[0m\n\n"}
{"message":"variable `Sp` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3698,"byte_end":3700,"line_start":160,"line_end":160,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3698,"byte_end":3700,"line_start":160,"line_end":160,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"sp","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Sp` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:160:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Sp: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `sp`\u001b[0m\n\n"}
{"message":"variable `Q` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3720,"byte_end":3721,"line_start":161,"line_end":161,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Q: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3720,"byte_end":3721,"line_start":161,"line_end":161,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Q: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"q","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Q` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:161:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Q: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `q`\u001b[0m\n\n"}
{"message":"variable `G` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3781,"byte_end":3782,"line_start":163,"line_end":163,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let G = get_G();","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3781,"byte_end":3782,"line_start":163,"line_end":163,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let G = get_G();","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"g","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `G` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:163:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let G = get_G();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `g`\u001b[0m\n\n"}
{"message":"variable `P` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3802,"byte_end":3803,"line_start":164,"line_end":164,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let P = p * G;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3802,"byte_end":3803,"line_start":164,"line_end":164,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let P = p * G;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"p","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `P` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:164:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let P = p * G;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `p`\u001b[0m\n\n"}
{"message":"variable `Z` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3909,"byte_end":3910,"line_start":168,"line_end":168,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let Z = z * G;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3909,"byte_end":3910,"line_start":168,"line_end":168,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let Z = z * G;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"z","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Z` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:168:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Z = z * G;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `z`\u001b[0m\n\n"}
{"message":"variable `X` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3928,"byte_end":3929,"line_start":169,"line_end":169,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let X = z * Q + P;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3928,"byte_end":3929,"line_start":169,"line_end":169,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let X = z * Q + P;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"x","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `X` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:169:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let X = z * Q + P;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `x`\u001b[0m\n\n"}
{"message":"variable `Y` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3951,"byte_end":3952,"line_start":170,"line_end":170,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let Y = s * X;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3951,"byte_end":3952,"line_start":170,"line_end":170,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let Y = s * X;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"y","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Y` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:170:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Y = s * X;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `y`\u001b[0m\n\n"}
{"message":"variable `Qs` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3970,"byte_end":3972,"line_start":171,"line_end":171,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let Qs = s * Q;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3970,"byte_end":3972,"line_start":171,"line_end":171,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let Qs = s * Q;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"qs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Qs` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:171:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Qs = s * Q;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `qs`\u001b[0m\n\n"}
{"message":"variable `Qsz` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":3990,"byte_end":3993,"line_start":172,"line_end":172,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let Qsz = z * Qs;","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":3990,"byte_end":3993,"line_start":172,"line_end":172,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let Qsz = z * Qs;","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"qsz","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Qsz` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:172:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Qsz = z * Qs;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `qsz`\u001b[0m\n\n"}
{"message":"function `verify_AP_declaration_of_value` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":4908,"byte_end":4938,"line_start":220,"line_end":220,"column_start":4,"column_end":34,"is_primary":true,"text":[{"text":"fn verify_AP_declaration_of_value(","highlight_start":4,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":4908,"byte_end":4938,"line_start":220,"line_end":220,"column_start":4,"column_end":34,"is_primary":true,"text":[{"text":"fn verify_AP_declaration_of_value(","highlight_start":4,"highlight_end":34}],"label":null,"suggested_replacement":"verify_ap_declaration_of_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `verify_AP_declaration_of_value` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:220:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn verify_AP_declaration_of_value(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `verify_ap_declaration_of_value`\u001b[0m\n\n"}
{"message":"variable `V` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":4944,"byte_end":4945,"line_start":221,"line_end":221,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    V: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":4944,"byte_end":4945,"line_start":221,"line_end":221,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    V: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"v","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `V` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:221:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    V: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `v`\u001b[0m\n\n"}
{"message":"variable `G` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":4999,"byte_end":5000,"line_start":223,"line_end":223,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    G: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":4999,"byte_end":5000,"line_start":223,"line_end":223,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    G: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"g","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `G` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:223:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    G: &EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `g`\u001b[0m\n\n"}
{"message":"variable `L` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":5021,"byte_end":5022,"line_start":224,"line_end":224,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    L: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":5021,"byte_end":5022,"line_start":224,"line_end":224,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    L: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"l","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `L` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:224:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    L: &EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `l`\u001b[0m\n\n"}
{"message":"variable `Q` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":5043,"byte_end":5044,"line_start":225,"line_end":225,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Q: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":5043,"byte_end":5044,"line_start":225,"line_end":225,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    Q: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"q","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Q` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:225:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Q: &EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `q`\u001b[0m\n\n"}
{"message":"variable `W` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":5081,"byte_end":5082,"line_start":227,"line_end":227,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let W = dec.W;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":5081,"byte_end":5082,"line_start":227,"line_end":227,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let W = dec.W;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"w","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `W` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:227:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let W = dec.W;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `w`\u001b[0m\n\n"}
{"message":"variable `Vc` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":5100,"byte_end":5102,"line_start":228,"line_end":228,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let Vc = dec.Vc;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":5100,"byte_end":5102,"line_start":228,"line_end":228,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let Vc = dec.Vc;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"vc","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Vc` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:228:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Vc = dec.Vc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `vc`\u001b[0m\n\n"}
{"message":"variable `Wc` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":5121,"byte_end":5123,"line_start":229,"line_end":229,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let Wc = dec.Wc;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":5121,"byte_end":5123,"line_start":229,"line_end":229,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let Wc = dec.Wc;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"wc","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Wc` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:229:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Wc = dec.Wc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `wc`\u001b[0m\n\n"}
{"message":"variable `Lcv` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":5142,"byte_end":5145,"line_start":230,"line_end":230,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let Lcv = dec.Lcv;","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":5142,"byte_end":5145,"line_start":230,"line_end":230,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let Lcv = dec.Lcv;","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"lcv","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Lcv` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:230:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Lcv = dec.Lcv;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `lcv`\u001b[0m\n\n"}
{"message":"variable `Rc` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":5165,"byte_end":5167,"line_start":231,"line_end":231,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let Rc = dec.Rc;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":5165,"byte_end":5167,"line_start":231,"line_end":231,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let Rc = dec.Rc;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"rc","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Rc` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:231:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let Rc = dec.Rc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rc`\u001b[0m\n\n"}
{"message":"variable `C` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":6894,"byte_end":6895,"line_start":299,"line_end":299,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"fn get_edward_hash(C: &EdwardsPoint, D: &EdwardsPoint) -> EdwardsPoint {","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":6894,"byte_end":6895,"line_start":299,"line_end":299,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"fn get_edward_hash(C: &EdwardsPoint, D: &EdwardsPoint) -> EdwardsPoint {","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":"c","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:299:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn get_edward_hash(C: &EdwardsPoint, D: &EdwardsPoint) -> EdwardsPoint {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c`\u001b[0m\n\n"}
{"message":"variable `D` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":6912,"byte_end":6913,"line_start":299,"line_end":299,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"fn get_edward_hash(C: &EdwardsPoint, D: &EdwardsPoint) -> EdwardsPoint {","highlight_start":38,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":6912,"byte_end":6913,"line_start":299,"line_end":299,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"fn get_edward_hash(C: &EdwardsPoint, D: &EdwardsPoint) -> EdwardsPoint {","highlight_start":38,"highlight_end":39}],"label":null,"suggested_replacement":"d","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `D` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:299:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn get_edward_hash(C: &EdwardsPoint, D: &EdwardsPoint) -> EdwardsPoint {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `d`\u001b[0m\n\n"}
{"message":"structure field `totalSpendingCommitment` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":7281,"byte_end":7304,"line_start":310,"line_end":310,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    totalSpendingCommitment: EdwardsPoint,","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":7281,"byte_end":7304,"line_start":310,"line_end":310,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    totalSpendingCommitment: EdwardsPoint,","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":"total_spending_commitment","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `totalSpendingCommitment` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:310:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m310\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    totalSpendingCommitment: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `total_spending_commitment`\u001b[0m\n\n"}
{"message":"structure field `uniqueMarker` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":7324,"byte_end":7336,"line_start":311,"line_end":311,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    uniqueMarker: EdwardsPoint,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":7324,"byte_end":7336,"line_start":311,"line_end":311,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    uniqueMarker: EdwardsPoint,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"unique_marker","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `uniqueMarker` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:311:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    uniqueMarker: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `unique_marker`\u001b[0m\n\n"}
{"message":"structure field `C_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":7356,"byte_end":7358,"line_start":312,"line_end":312,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    C_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":7356,"byte_end":7358,"line_start":312,"line_end":312,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    C_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"c","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `C_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:312:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    C_: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `c`\u001b[0m\n\n"}
{"message":"structure field `D_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":7378,"byte_end":7380,"line_start":313,"line_end":313,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    D_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":7378,"byte_end":7380,"line_start":313,"line_end":313,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    D_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"d","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `D_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:313:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m313\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    D_: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `d`\u001b[0m\n\n"}
{"message":"function `verify_KYC_proof` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":7456,"byte_end":7472,"line_start":318,"line_end":318,"column_start":4,"column_end":20,"is_primary":true,"text":[{"text":"fn verify_KYC_proof(","highlight_start":4,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":7456,"byte_end":7472,"line_start":318,"line_end":318,"column_start":4,"column_end":20,"is_primary":true,"text":[{"text":"fn verify_KYC_proof(","highlight_start":4,"highlight_end":20}],"label":null,"suggested_replacement":"verify_kyc_proof","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `verify_KYC_proof` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:318:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn verify_KYC_proof(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `verify_kyc_proof`\u001b[0m\n\n"}
{"message":"variable `A_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":7510,"byte_end":7512,"line_start":320,"line_end":320,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    A_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":7510,"byte_end":7512,"line_start":320,"line_end":320,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    A_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:320:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    A_: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `B_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":7532,"byte_end":7534,"line_start":321,"line_end":321,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    B_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":7532,"byte_end":7534,"line_start":321,"line_end":321,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    B_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"b","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `B_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:321:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    B_: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `b`\u001b[0m\n\n"}
{"message":"variable `Vt` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":7554,"byte_end":7556,"line_start":322,"line_end":322,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Vt: &[EdwardsPoint],","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":7554,"byte_end":7556,"line_start":322,"line_end":322,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Vt: &[EdwardsPoint],","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"vt","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Vt` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:322:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m322\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Vt: &[EdwardsPoint],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `vt`\u001b[0m\n\n"}
{"message":"variable `S` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":7579,"byte_end":7580,"line_start":323,"line_end":323,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    S: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":7579,"byte_end":7580,"line_start":323,"line_end":323,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    S: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"s","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `S` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:323:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    S: &EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `s`\u001b[0m\n\n"}
{"message":"variable `Sp` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":7601,"byte_end":7603,"line_start":324,"line_end":324,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: &EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":7601,"byte_end":7603,"line_start":324,"line_end":324,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: &EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"sp","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Sp` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:324:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Sp: &EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `sp`\u001b[0m\n\n"}
{"message":"variable `J` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":7798,"byte_end":7799,"line_start":331,"line_end":331,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let J = proof.uniqueMarker;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":7798,"byte_end":7799,"line_start":331,"line_end":331,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let J = proof.uniqueMarker;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"j","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `J` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:331:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let J = proof.uniqueMarker;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `j`\u001b[0m\n\n"}
{"message":"variable `V_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":8265,"byte_end":8267,"line_start":352,"line_end":352,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let V_ = Vt[0];","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":8265,"byte_end":8267,"line_start":352,"line_end":352,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let V_ = Vt[0];","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"v","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `V_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:352:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m352\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let V_ = Vt[0];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `v`\u001b[0m\n\n"}
{"message":"variable `X` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":8332,"byte_end":8333,"line_start":353,"line_end":353,"column_start":56,"column_end":57,"is_primary":true,"text":[{"text":"    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);","highlight_start":56,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":8332,"byte_end":8333,"line_start":353,"line_end":353,"column_start":56,"column_end":57,"is_primary":true,"text":[{"text":"    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);","highlight_start":56,"highlight_end":57}],"label":null,"suggested_replacement":"x","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `X` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:353:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `x`\u001b[0m\n\n"}
{"message":"variable `Y` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":8335,"byte_end":8336,"line_start":353,"line_end":353,"column_start":59,"column_end":60,"is_primary":true,"text":[{"text":"    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);","highlight_start":59,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":8335,"byte_end":8336,"line_start":353,"line_end":353,"column_start":59,"column_end":60,"is_primary":true,"text":[{"text":"    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);","highlight_start":59,"highlight_end":60}],"label":null,"suggested_replacement":"y","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Y` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:353:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `y`\u001b[0m\n\n"}
{"message":"variable `CC` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":8354,"byte_end":8356,"line_start":354,"line_end":354,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let CC = proof.totalSpendingCommitment;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":8354,"byte_end":8356,"line_start":354,"line_end":354,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let CC = proof.totalSpendingCommitment;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"cc","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CC` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:354:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m354\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let CC = proof.totalSpendingCommitment;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `cc`\u001b[0m\n\n"}
{"message":"variable `E_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":8540,"byte_end":8542,"line_start":360,"line_end":360,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"            let E_ = CC - source.totalSpendingCommitment + V_ - sum;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":8540,"byte_end":8542,"line_start":360,"line_end":360,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"            let E_ = CC - source.totalSpendingCommitment + V_ - sum;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `E_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:360:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let E_ = CC - source.totalSpendingCommitment + V_ - sum;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `e`\u001b[0m\n\n"}
{"message":"function `generate_starting_KYC_proof` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":9457,"byte_end":9484,"line_start":393,"line_end":393,"column_start":8,"column_end":35,"is_primary":true,"text":[{"text":"pub fn generate_starting_KYC_proof(p: Scalar) -> SpendingLimitProof {","highlight_start":8,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":9457,"byte_end":9484,"line_start":393,"line_end":393,"column_start":8,"column_end":35,"is_primary":true,"text":[{"text":"pub fn generate_starting_KYC_proof(p: Scalar) -> SpendingLimitProof {","highlight_start":8,"highlight_end":35}],"label":null,"suggested_replacement":"generate_starting_kyc_proof","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `generate_starting_KYC_proof` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:393:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m393\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub fn generate_starting_KYC_proof(p: Scalar) -> SpendingLimitProof {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `generate_starting_kyc_proof`\u001b[0m\n\n"}
{"message":"variable `G` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":9528,"byte_end":9529,"line_start":394,"line_end":394,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let G = get_G();","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":9528,"byte_end":9529,"line_start":394,"line_end":394,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let G = get_G();","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"g","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `G` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:394:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m394\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let G = get_G();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `g`\u001b[0m\n\n"}
{"message":"structure field `C` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":9831,"byte_end":9832,"line_start":408,"line_end":408,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    C: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":9831,"byte_end":9832,"line_start":408,"line_end":408,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    C: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"c","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `C` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:408:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    C: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c`\u001b[0m\n\n"}
{"message":"structure field `D` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":9852,"byte_end":9853,"line_start":409,"line_end":409,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    D: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":9852,"byte_end":9853,"line_start":409,"line_end":409,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    D: EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"d","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `D` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:409:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    D: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `d`\u001b[0m\n\n"}
{"message":"structure field `totalSpendingCommitment` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":9873,"byte_end":9896,"line_start":410,"line_end":410,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    totalSpendingCommitment: EdwardsPoint","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":9873,"byte_end":9896,"line_start":410,"line_end":410,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    totalSpendingCommitment: EdwardsPoint","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":"total_spending_commitment","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `totalSpendingCommitment` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:410:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m410\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    totalSpendingCommitment: EdwardsPoint\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `total_spending_commitment`\u001b[0m\n\n"}
{"message":"function `generate_KYC_proof` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":9917,"byte_end":9935,"line_start":413,"line_end":413,"column_start":4,"column_end":22,"is_primary":true,"text":[{"text":"fn generate_KYC_proof(","highlight_start":4,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":9917,"byte_end":9935,"line_start":413,"line_end":413,"column_start":4,"column_end":22,"is_primary":true,"text":[{"text":"fn generate_KYC_proof(","highlight_start":4,"highlight_end":22}],"label":null,"suggested_replacement":"generate_kyc_proof","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `generate_KYC_proof` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:413:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m413\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn generate_KYC_proof(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `generate_kyc_proof`\u001b[0m\n\n"}
{"message":"variable `A_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":9979,"byte_end":9981,"line_start":415,"line_end":415,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    A_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":9979,"byte_end":9981,"line_start":415,"line_end":415,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    A_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:415:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m415\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    A_: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `B_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10001,"byte_end":10003,"line_start":416,"line_end":416,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    B_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10001,"byte_end":10003,"line_start":416,"line_end":416,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    B_: EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"b","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `B_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:416:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m416\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    B_: EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `b`\u001b[0m\n\n"}
{"message":"variable `Vt` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10023,"byte_end":10025,"line_start":417,"line_end":417,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Vt: &[EdwardsPoint],","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10023,"byte_end":10025,"line_start":417,"line_end":417,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Vt: &[EdwardsPoint],","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"vt","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Vt` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:417:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m417\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Vt: &[EdwardsPoint],\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `vt`\u001b[0m\n\n"}
{"message":"variable `S` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10048,"byte_end":10049,"line_start":418,"line_end":418,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    S: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10048,"byte_end":10049,"line_start":418,"line_end":418,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    S: &EdwardsPoint,","highlight_start":5,"highlight_end":6}],"label":null,"suggested_replacement":"s","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `S` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:418:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m418\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    S: &EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `s`\u001b[0m\n\n"}
{"message":"variable `Sp` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10070,"byte_end":10072,"line_start":419,"line_end":419,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: &EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10070,"byte_end":10072,"line_start":419,"line_end":419,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    Sp: &EdwardsPoint,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":"sp","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Sp` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:419:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m419\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Sp: &EdwardsPoint,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `sp`\u001b[0m\n\n"}
{"message":"variable `C` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10152,"byte_end":10153,"line_start":423,"line_end":423,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let C = sources[k].C_;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10152,"byte_end":10153,"line_start":423,"line_end":423,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let C = sources[k].C_;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"c","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:423:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let C = sources[k].C_;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c`\u001b[0m\n\n"}
{"message":"variable `D` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10179,"byte_end":10180,"line_start":424,"line_end":424,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let D = sources[k].D_;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10179,"byte_end":10180,"line_start":424,"line_end":424,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let D = sources[k].D_;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"d","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `D` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:424:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m424\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let D = sources[k].D_;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `d`\u001b[0m\n\n"}
{"message":"variable `E` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10206,"byte_end":10207,"line_start":425,"line_end":425,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let E = p * D;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10206,"byte_end":10207,"line_start":425,"line_end":425,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let E = p * D;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `E` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:425:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m425\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let E = p * D;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `e`\u001b[0m\n\n"}
{"message":"variable `J` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10394,"byte_end":10395,"line_start":431,"line_end":431,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let J = p * hash;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10394,"byte_end":10395,"line_start":431,"line_end":431,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    let J = p * hash;","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"j","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `J` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:431:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let J = p * hash;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `j`\u001b[0m\n\n"}
{"message":"variable `C_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10503,"byte_end":10505,"line_start":434,"line_end":434,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let C_ = x * C;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10503,"byte_end":10505,"line_start":434,"line_end":434,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let C_ = x * C;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"c","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:434:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m434\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let C_ = x * C;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `c`\u001b[0m\n\n"}
{"message":"variable `D_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10523,"byte_end":10525,"line_start":435,"line_end":435,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let D_ = x * D;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10523,"byte_end":10525,"line_start":435,"line_end":435,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let D_ = x * D;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"d","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `D_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:435:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let D_ = x * D;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `d`\u001b[0m\n\n"}
{"message":"variable `V_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10829,"byte_end":10831,"line_start":446,"line_end":446,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let V_ = Vt[0];","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10829,"byte_end":10831,"line_start":446,"line_end":446,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let V_ = Vt[0];","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"v","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `V_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:446:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m446\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let V_ = Vt[0];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `v`\u001b[0m\n\n"}
{"message":"variable `X` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10896,"byte_end":10897,"line_start":447,"line_end":447,"column_start":56,"column_end":57,"is_primary":true,"text":[{"text":"    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);","highlight_start":56,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10896,"byte_end":10897,"line_start":447,"line_end":447,"column_start":56,"column_end":57,"is_primary":true,"text":[{"text":"    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);","highlight_start":56,"highlight_end":57}],"label":null,"suggested_replacement":"x","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `X` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:447:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m447\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `x`\u001b[0m\n\n"}
{"message":"variable `Y` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10899,"byte_end":10900,"line_start":447,"line_end":447,"column_start":59,"column_end":60,"is_primary":true,"text":[{"text":"    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);","highlight_start":59,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10899,"byte_end":10900,"line_start":447,"line_end":447,"column_start":59,"column_end":60,"is_primary":true,"text":[{"text":"    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);","highlight_start":59,"highlight_end":60}],"label":null,"suggested_replacement":"y","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Y` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:447:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m447\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let sum = Vt.iter().fold(EdwardsPoint::default(), |X, Y| X + Y);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `y`\u001b[0m\n\n"}
{"message":"variable `CC` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":10918,"byte_end":10920,"line_start":448,"line_end":448,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let CC = sources[k].totalSpendingCommitment + E - V_ + sum;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":10918,"byte_end":10920,"line_start":448,"line_end":448,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    let CC = sources[k].totalSpendingCommitment + E - V_ + sum;","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"cc","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `CC` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:448:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m448\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let CC = sources[k].totalSpendingCommitment + E - V_ + sum;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `cc`\u001b[0m\n\n"}
{"message":"variable `E_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transaction.rs","byte_start":11110,"byte_end":11112,"line_start":454,"line_end":454,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"            let E_ = CC - source.totalSpendingCommitment + V_ - sum;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transaction.rs","byte_start":11110,"byte_end":11112,"line_start":454,"line_end":454,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"            let E_ = CC - source.totalSpendingCommitment + V_ - sum;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":"e","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `E_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transaction.rs:454:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let E_ = CC - source.totalSpendingCommitment + V_ - sum;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `e`\u001b[0m\n\n"}
{"message":"associated constant `size` should have an upper case name","code":{"code":"non_upper_case_globals","explanation":null},"level":"warning","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":3358,"byte_end":3362,"line_start":125,"line_end":125,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"    const size: usize = 2 * 32;","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_upper_case_globals)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to upper case","code":null,"level":"help","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":3358,"byte_end":3362,"line_start":125,"line_end":125,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"    const size: usize = 2 * 32;","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":"SIZE","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated constant `size` should have an upper case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/zkplmt_const_size.rs:125:11\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    const size: usize = 2 * 32;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper case: `SIZE`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_upper_case_globals)]` on by default\u001b[0m\n\n"}
{"message":"associated constant `Tuple_Size` should have an upper case name","code":{"code":"non_upper_case_globals","explanation":null},"level":"warning","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":3933,"byte_end":3943,"line_start":142,"line_end":142,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9252,"byte_end":9288,"line_start":266,"line_end":266,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(3, 5, XTuple, XProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"convert the identifier to upper case","code":null,"level":"help","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":3933,"byte_end":3943,"line_start":142,"line_end":142,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":"TUPLE_SIZE","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9252,"byte_end":9288,"line_start":266,"line_end":266,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(3, 5, XTuple, XProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated constant `Tuple_Size` should have an upper case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/zkplmt_const_size.rs:142:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            const Tuple_Size: usize = $num_vectors * CurveVector::size;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper case: `TUPLE_SIZE`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mproof_system!(3, 5, XTuple, XProof);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"associated constant `Size_of_Ls` should have an upper case name","code":{"code":"non_upper_case_globals","explanation":null},"level":"warning","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":4427,"byte_end":4437,"line_start":158,"line_end":158,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9252,"byte_end":9288,"line_start":266,"line_end":266,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(3, 5, XTuple, XProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"convert the identifier to upper case","code":null,"level":"help","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":4427,"byte_end":4437,"line_start":158,"line_end":158,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":"SIZE_OF_LS","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9252,"byte_end":9288,"line_start":266,"line_end":266,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(3, 5, XTuple, XProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated constant `Size_of_Ls` should have an upper case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/zkplmt_const_size.rs:158:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper case: `SIZE_OF_LS`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mproof_system!(3, 5, XTuple, XProof);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"associated constant `Size_of_Tuples` should have an upper case name","code":{"code":"non_upper_case_globals","explanation":null},"level":"warning","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":4506,"byte_end":4520,"line_start":159,"line_end":159,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9252,"byte_end":9288,"line_start":266,"line_end":266,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(3, 5, XTuple, XProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"convert the identifier to upper case","code":null,"level":"help","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":4506,"byte_end":4520,"line_start":159,"line_end":159,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":"SIZE_OF_TUPLES","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9252,"byte_end":9288,"line_start":266,"line_end":266,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(3, 5, XTuple, XProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated constant `Size_of_Tuples` should have an upper case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/zkplmt_const_size.rs:159:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper case: `SIZE_OF_TUPLES`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mproof_system!(3, 5, XTuple, XProof);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"associated constant `Tuple_Size` should have an upper case name","code":{"code":"non_upper_case_globals","explanation":null},"level":"warning","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":3933,"byte_end":3943,"line_start":142,"line_end":142,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9289,"byte_end":9325,"line_start":267,"line_end":267,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(5, 5, YTuple, YProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"convert the identifier to upper case","code":null,"level":"help","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":3933,"byte_end":3943,"line_start":142,"line_end":142,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":"TUPLE_SIZE","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9289,"byte_end":9325,"line_start":267,"line_end":267,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(5, 5, YTuple, YProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated constant `Tuple_Size` should have an upper case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/zkplmt_const_size.rs:142:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            const Tuple_Size: usize = $num_vectors * CurveVector::size;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper case: `TUPLE_SIZE`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mproof_system!(5, 5, YTuple, YProof);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"associated constant `Size_of_Ls` should have an upper case name","code":{"code":"non_upper_case_globals","explanation":null},"level":"warning","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":4427,"byte_end":4437,"line_start":158,"line_end":158,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9289,"byte_end":9325,"line_start":267,"line_end":267,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(5, 5, YTuple, YProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"convert the identifier to upper case","code":null,"level":"help","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":4427,"byte_end":4437,"line_start":158,"line_end":158,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":19,"highlight_end":29}],"label":null,"suggested_replacement":"SIZE_OF_LS","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9289,"byte_end":9325,"line_start":267,"line_end":267,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(5, 5, YTuple, YProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated constant `Size_of_Ls` should have an upper case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/zkplmt_const_size.rs:158:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper case: `SIZE_OF_LS`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mproof_system!(5, 5, YTuple, YProof);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"associated constant `Size_of_Tuples` should have an upper case name","code":{"code":"non_upper_case_globals","explanation":null},"level":"warning","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":4506,"byte_end":4520,"line_start":159,"line_end":159,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9289,"byte_end":9325,"line_start":267,"line_end":267,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(5, 5, YTuple, YProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"convert the identifier to upper case","code":null,"level":"help","spans":[{"file_name":"src/zkplmt_const_size.rs","byte_start":4506,"byte_end":4520,"line_start":159,"line_end":159,"column_start":19,"column_end":33,"is_primary":true,"text":[{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":19,"highlight_end":33}],"label":null,"suggested_replacement":"SIZE_OF_TUPLES","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/zkplmt_const_size.rs","byte_start":9289,"byte_end":9325,"line_start":267,"line_end":267,"column_start":1,"column_end":37,"is_primary":false,"text":[{"text":"proof_system!(5, 5, YTuple, YProof);","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"proof_system!","def_site_span":{"file_name":"src/zkplmt_const_size.rs","byte_start":3617,"byte_end":9250,"line_start":135,"line_end":264,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! proof_system {","highlight_start":1,"highlight_end":28},{"text":"    ($num_vectors:expr, $num_candidates:expr, $tuple_type_name:ident, $proof_name:ident) => {","highlight_start":1,"highlight_end":94},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $tuple_type_name {","highlight_start":1,"highlight_end":38},{"text":"            pub values: [CurveVector; $num_vectors],","highlight_start":1,"highlight_end":53},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        impl $tuple_type_name {","highlight_start":1,"highlight_end":32},{"text":"            const Tuple_Size: usize = $num_vectors * CurveVector::size;","highlight_start":1,"highlight_end":72},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn fill_bytes(&self, buf: &mut [u8]) {","highlight_start":1,"highlight_end":55},{"text":"                for i in 0..$num_vectors {","highlight_start":1,"highlight_end":43},{"text":"                    self.values[i].fill_bytes(&mut buf[CurveVector::size * i..]);","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[derive(Clone, Debug, PartialEq)]","highlight_start":1,"highlight_end":43},{"text":"        pub struct $proof_name {","highlight_start":1,"highlight_end":33},{"text":"            c: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"            d: [Scalar; $num_candidates],","highlight_start":1,"highlight_end":42},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl $proof_name {","highlight_start":1,"highlight_end":27},{"text":"            const Size_of_Ls: usize = 32 * $num_candidates * $num_vectors * 2;","highlight_start":1,"highlight_end":79},{"text":"            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;","highlight_start":1,"highlight_end":90},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn create_zkplmt(","highlight_start":1,"highlight_end":34},{"text":"                tuples: &[$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":62},{"text":"                hidden_index: usize,","highlight_start":1,"highlight_end":37},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let vectors_per_tuple = $num_vectors;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut csprng: OsRng = OsRng::default();","highlight_start":1,"highlight_end":58},{"text":"                let r = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":53},{"text":"                let mut c = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut d = [Scalar::zero(); $num_candidates];","highlight_start":1,"highlight_end":63},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    assert!(tuples[j].values.len() == vectors_per_tuple);","highlight_start":1,"highlight_end":74},{"text":"                    if j != hidden_index {","highlight_start":1,"highlight_end":43},{"text":"                        c[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        d[j] = Scalar::random(&mut csprng);","highlight_start":1,"highlight_end":60},{"text":"                        for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":56},{"text":"                            let L = c[j] * tuples[j].values[i].x + d[j] * tuples[j].values[i].y;","highlight_start":1,"highlight_end":97},{"text":"                            let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":65},{"text":"                            let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":90},{"text":"                            copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        sum += d[j];","highlight_start":1,"highlight_end":37},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":48},{"text":"                    let L = r * tuples[hidden_index].values[i].x;","highlight_start":1,"highlight_end":66},{"text":"                    let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":57},{"text":"                    let target_index = (hidden_index * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":93},{"text":"                    copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                d[hidden_index] = hash_scalar - sum;","highlight_start":1,"highlight_end":53},{"text":"                c[hidden_index] = r - d[hidden_index] * secret;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $proof_name { c: c, d: d }","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[allow(non_snake_case)]","highlight_start":1,"highlight_end":37},{"text":"            pub fn verify_zkplmt(&self, tuples: &[$tuple_type_name; $num_candidates]) -> bool {","highlight_start":1,"highlight_end":96},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"                let mut mult_sc_vec = [Scalar::zero(); 2];","highlight_start":1,"highlight_end":59},{"text":"                let mut mult_ed_vec = [EdwardsPoint::default(); 2];","highlight_start":1,"highlight_end":68},{"text":"                if vectors_per_tuple == 0 {","highlight_start":1,"highlight_end":44},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let c = &self.c;","highlight_start":1,"highlight_end":33},{"text":"                let d = &self.d;","highlight_start":1,"highlight_end":33},{"text":"                let vectors_per_tuple = tuples[0].values.len();","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut sum = Scalar::zero();","highlight_start":1,"highlight_end":46},{"text":"                let mut hash_input = [0u8; $proof_name::Size_of_Ls + $proof_name::Size_of_Tuples];","highlight_start":1,"highlight_end":99},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for j in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    if tuples[j].values.len() != vectors_per_tuple {","highlight_start":1,"highlight_end":69},{"text":"                        return false;","highlight_start":1,"highlight_end":38},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    for i in 0..vectors_per_tuple {","highlight_start":1,"highlight_end":52},{"text":"                        mult_ed_vec[0] = tuples[j].values[i].x;","highlight_start":1,"highlight_end":64},{"text":"                        mult_ed_vec[1] = tuples[j].values[i].y;","highlight_start":1,"highlight_end":64},{"text":"                        mult_sc_vec[0] = c[j];","highlight_start":1,"highlight_end":47},{"text":"                        mult_sc_vec[1] = d[j];","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        let L = EdwardsPoint::multiscalar_mul(&mult_sc_vec, &mult_ed_vec);","highlight_start":1,"highlight_end":91},{"text":"                        let bytes = L.compress().to_bytes();","highlight_start":1,"highlight_end":61},{"text":"                        let target_index = (j * vectors_per_tuple + i) * bytes.len();","highlight_start":1,"highlight_end":86},{"text":"                        copy(&mut hash_input[target_index..], &bytes);","highlight_start":1,"highlight_end":71},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    sum += d[j];","highlight_start":1,"highlight_end":33},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for i in 0..tuples.len() {","highlight_start":1,"highlight_end":43},{"text":"                    tuples[i].fill_bytes(","highlight_start":1,"highlight_end":42},{"text":"                        &mut hash_input","highlight_start":1,"highlight_end":40},{"text":"                            [$proof_name::Size_of_Ls + i * $tuple_type_name::Tuple_Size..],","highlight_start":1,"highlight_end":92},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                let hash_scalar = Scalar::hash_from_bytes::<Sha512>(&hash_input);","highlight_start":1,"highlight_end":82},{"text":"                if hash_scalar.eq(&sum) {","highlight_start":1,"highlight_end":42},{"text":"                    return true;","highlight_start":1,"highlight_end":33},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    return false;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            pub fn create_zkplmt_shuffle(","highlight_start":1,"highlight_end":42},{"text":"                tuples: &mut [$tuple_type_name; $num_candidates],","highlight_start":1,"highlight_end":66},{"text":"                secret: Scalar,","highlight_start":1,"highlight_end":32},{"text":"            ) -> $proof_name {","highlight_start":1,"highlight_end":31},{"text":"                let hidden_index = shuffle(tuples);","highlight_start":1,"highlight_end":52},{"text":"                return $proof_name::create_zkplmt(tuples, hidden_index, secret);","highlight_start":1,"highlight_end":81},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated constant `Size_of_Tuples` should have an upper case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/zkplmt_const_size.rs:159:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            const Size_of_Tuples: usize = $tuple_type_name::Tuple_Size * $num_candidates;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper case: `SIZE_OF_TUPLES`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mproof_system!(5, 5, YTuple, YProof);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"191 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 191 warnings emitted\u001b[0m\n\n"}
